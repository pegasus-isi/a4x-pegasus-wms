[build-system]

requires = ["setuptools>=44.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools]

zip-safe = false

[tool.setuptools.packages.find]

where = ["src"]
namespaces = false

[project]

name = "a4x-pegasus-wms"
version = "0.0.0"
authors = [{ name = "Rajiv Mayani", email = "mayani@isi.edu" }]
maintainers = [{ name = "Rajiv Mayani", email = "mayani@isi.edu" }]
description = "Pegasus WMS plugin for the A4X Orchestrator"
license = { file = "LICENSE.md" }
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 1 - Planning",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering",
]
dependencies = ["pegasus-wms.api"]

[project.urls]

Homepage = "https://pegasus.isi.edu"
Repository = "https://github.com/pegasus-isi/a4x-pegasus-wms.git"
Issues = "https://github.com/pegasus-isi/a4x-pegasus-wms/issues"
Changelog = "https://github.com/pegasus-isi/a4x-pegasus-wms/blob/master/CHANGELOG.md"
Documentation = "https://a4x-pegasus-wms.readthedocs.io/en/latest/"

[project.entry-points.wms_plugins]
pegasus = "a4x_pegasus_wms:PegasusWMS"

[project.optional-dependencies]

tests = [
    "pytest",
    "pytest-mock",
    "coverage",
    "pytest-cov",
    "pytest-resource-path",
    # "a4x-orchestration",
]
docs = [
    "sphinx",
    "sphinx-book-theme",
    "sphinx-jsonschema",
    "sphinx_tabs",
    "sphinx-click",
    "myst-parser",
]

[dependency-groups]

dev = ["ruff", "tox"]
pre-commit = ["pre-commit"]
tests = [
    "pytest",
    "pytest-mock",
    "coverage",
    "pytest-cov",
    "pytest-resource-path",
    # "a4x-orchestration",
]
docs = [
    "sphinx",
    "sphinx-book-theme",
    "sphinx-jsonschema",
    "sphinx_tabs",
    "sphinx-click",
    "myst-parser",
]


[tool.commitizen]

version = "0.0.0"
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "pep440"
version_provider = "commitizen"
version_files = [
    "pyproject.toml:version",
    "src/a4x_pegasus_wms/version.txt",
    "docs/conf.py:release",
]
update_changelog_on_bump = true
major_version_zero = true


[tool.ruff]

target-version = "py39"
line-length = 88

[tool.ruff.lint]

extend-select = [
    "F",   # pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "D",   # flake8-docstrings
    "B",   # flake8-bugbear
    "C90", # mccabe
    "C4",  # flake8-comprehensions
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",   # flake8-bandit
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "G",   # flake8-logging-format
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TC",  # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "UP",  # pyupgrade
]
ignore = ["S101"]

[tool.ruff.lint.pydocstyle]

convention = "google"

[tool.ruff.format]

docstring-code-format = true

[tool.ruff.lint.isort]

known-first-party = ["a4x_pegasus_wms"]
known-third-party = ["Pegasus"]
forced-separate = ["a4x_pegasus_wms"]


[tool.pytest.ini_options]

markers = ["incremental"]

"resource-path.directory-name-test-resources" = "resources"
